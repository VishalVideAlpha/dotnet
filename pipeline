pipeline {
  agent { label 'dev' }  // <-- change 'dev' to your node label, or use 'any'

  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'dotnetdemoapi', description: 'Docker image name')
    string(name: 'IMAGE_TAG',  defaultValue: '',               description: 'Tag (default: BUILD_NUMBER)')
    string(name: 'DOCKER_REGISTRY', defaultValue: '',          description: 'Registry host, e.g. ghcr.io/USER or docker.io/USER')
    string(name: 'DOCKER_CREDENTIALS_ID', defaultValue: '',    description: 'Jenkins credentials ID for registry')
    string(name: 'HOST_PORT', defaultValue: '8080',            description: 'Host port to expose')
    choice(name: 'ASPNETCORE_ENVIRONMENT', choices: ['Development','Staging','Production'], description: 'ASP.NET environment')
  }

  environment {
    IMAGE_NAME = "${params.IMAGE_NAME}"
    IMAGE_TAG  = "${params.IMAGE_TAG}"
    DOCKER_REGISTRY = "${params.DOCKER_REGISTRY}"
    DOCKER_CREDENTIALS_ID = "${params.DOCKER_CREDENTIALS_ID}"
    HOST_PORT = "${params.HOST_PORT}"
    ASPNETCORE_ENVIRONMENT = "${params.ASPNETCORE_ENVIRONMENT}"
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        powershell 'Get-ChildItem -Force'
      }
    }

    stage('Resolve Defaults') {
      steps {
        script {
          if (!env.IMAGE_TAG?.trim()) { env.IMAGE_TAG = "${env.BUILD_NUMBER}" }
          echo "Using IMAGE_NAME=${env.IMAGE_NAME}, IMAGE_TAG=${env.IMAGE_TAG}"
        }
      }
    }

    stage('Restore & Test') {
      steps {
        powershell '''
          dotnet --version
          dotnet restore "dotnetdemoapi/dotnetdemoapi/dotnetdemoapi.csproj"
          if (Test-Path tests) {
            Get-ChildItem tests -Recurse -Filter *.csproj | ForEach-Object {
              dotnet test $_.FullName -c Release --no-restore
            }
          } else {
            Write-Host "No tests directory found, skipping dotnet test."
          }
        '''
      }
    }

    stage('Publish') {
      steps {
        powershell '''
          dotnet publish "dotnetdemoapi/dotnetdemoapi/dotnetdemoapi.csproj" -c Release -o out --no-restore
        '''
      }
    }

    stage('Build Docker image') {
      steps {
        powershell '''
          docker build -f "dotnetdemoapi/dotnetdemoapi/Dockerfile" -t "${env:IMAGE_NAME}:${env:IMAGE_TAG}" .
        '''
      }
    }

    stage('Login & Push (optional)') {
      when { expression { return env.DOCKER_REGISTRY?.trim() && env.DOCKER_CREDENTIALS_ID?.trim() } }
      steps {
        withCredentials([usernamePassword(credentialsId: "${env.DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          powershell '''
            echo $env:DOCKER_PASS | docker login "$env:DOCKER_REGISTRY" -u "$env:DOCKER_USER" --password-stdin
            docker tag "${env:IMAGE_NAME}:${env:IMAGE_TAG}" "${env:DOCKER_REGISTRY}/${env:IMAGE_NAME}:${env:IMAGE_TAG}"
            docker push "${env:DOCKER_REGISTRY}/${env:IMAGE_NAME}:${env:IMAGE_TAG}"
          '''
        }
      }
    }

    stage('Deploy with Compose (optional)') {
      when { expression { return fileExists('docker-compose.yml') } }
      steps {
        powershell '''
          $env:ASPNETCORE_ENVIRONMENT = "${env:ASPNETCORE_ENVIRONMENT}"
          $env:HOST_PORT = "${env:HOST_PORT}"
          $env:IMAGE_NAME = "${env:IMAGE_NAME}"
          $env:IMAGE_TAG = "${env:IMAGE_TAG}"
          docker compose up -d --build
          docker compose ps
        '''
      }
    }
  }

  post {
    always {
      powershell 'docker images | Select-Object -First 10 | Format-Table -AutoSize'
    }
  }
}
